load("@npm//@bazel/typescript:index.bzl", "ts_project")
load("@build_bazel_rules_nodejs//:index.bzl", "nodejs_binary")
load("@npm//@bazel/rollup:index.bzl", "rollup_bundle")
load("@npm//@bazel/terser:index.bzl", "terser_minified")
load("@io_bazel_rules_docker//nodejs:image.bzl", "nodejs_image")
load("@io_bazel_rules_docker//container:layer.bzl", "container_layer")

package(default_visibility = ["//visibility:public"])

ts_project(
    name = "backend_lib",
    srcs = glob(["*.ts"]),
    declaration = True,
    tsconfig = "//:tsconfig.json",
    deps = [
        "//src/common/api:api_grpc_lib",
        "@npm//@grpc/grpc-js",
        "@npm//@types/google-protobuf",
        "@npm//google-protobuf",
        "@npm//sql-template-strings",
        "@npm//sqlite",
        "@npm//sqlite3",
    ],
)

filegroup(
    name = "migrations",
    srcs = glob(["migrations/*.sql"]),
)

nodejs_binary(
    name = "backend",
    data = [
        ":bundle",
        ":migrations",
    ],
    entry_point = "index.js",
    env = {
        "METANOTES_MIGRATIONS_DIR": "src/backend/migrations",
    },
)

rollup_bundle(
    name = "bundle",
    config_file = "rollup.config.js",
    entry_point = "index.js",
    format = "cjs",
    deps = [
        ":backend_lib",
        "@npm//@rollup/plugin-commonjs",
        "@npm//@rollup/plugin-json",
        "@npm//@rollup/plugin-node-resolve",
    ],
)

terser_minified(
    name = "bundle.minified",
    src = ":bundle",
    sourcemap = False,
)

container_layer(
    name = "migrations_layer",
    files = [":migrations"],
)

nodejs_image(
    name = "backend_image",
    data = [
        ":bundle",
        ":migrations",
    ],
    entry_point = "bundle.js",
    layers = [":migrations_layer"],
)
