// source: api.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
goog.exportSymbol('proto.metanotes.api.GetAllMetadataReply', null, global);
goog.exportSymbol('proto.metanotes.api.GetScribbleReply', null, global);
goog.exportSymbol('proto.metanotes.api.GetScribbleRequest', null, global);
goog.exportSymbol('proto.metanotes.api.GetScribblesByTextSearchReply', null, global);
goog.exportSymbol('proto.metanotes.api.GetScribblesByTextSearchReply.SearchResult', null, global);
goog.exportSymbol('proto.metanotes.api.GetScribblesByTextSearchRequest', null, global);
goog.exportSymbol('proto.metanotes.api.RemoveScribbleRequest', null, global);
goog.exportSymbol('proto.metanotes.api.Scribble', null, global);
goog.exportSymbol('proto.metanotes.api.Scribble.BodyCase', null, global);
goog.exportSymbol('proto.metanotes.api.SetScribbleRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.metanotes.api.Scribble = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.metanotes.api.Scribble.oneofGroups_);
};
goog.inherits(proto.metanotes.api.Scribble, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.metanotes.api.Scribble.displayName = 'proto.metanotes.api.Scribble';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.metanotes.api.GetScribbleRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.metanotes.api.GetScribbleRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.metanotes.api.GetScribbleRequest.displayName = 'proto.metanotes.api.GetScribbleRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.metanotes.api.GetScribbleReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.metanotes.api.GetScribbleReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.metanotes.api.GetScribbleReply.displayName = 'proto.metanotes.api.GetScribbleReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.metanotes.api.GetAllMetadataReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.metanotes.api.GetAllMetadataReply.repeatedFields_, null);
};
goog.inherits(proto.metanotes.api.GetAllMetadataReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.metanotes.api.GetAllMetadataReply.displayName = 'proto.metanotes.api.GetAllMetadataReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.metanotes.api.SetScribbleRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.metanotes.api.SetScribbleRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.metanotes.api.SetScribbleRequest.displayName = 'proto.metanotes.api.SetScribbleRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.metanotes.api.RemoveScribbleRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.metanotes.api.RemoveScribbleRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.metanotes.api.RemoveScribbleRequest.displayName = 'proto.metanotes.api.RemoveScribbleRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.metanotes.api.GetScribblesByTextSearchRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.metanotes.api.GetScribblesByTextSearchRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.metanotes.api.GetScribblesByTextSearchRequest.displayName = 'proto.metanotes.api.GetScribblesByTextSearchRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.metanotes.api.GetScribblesByTextSearchReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.metanotes.api.GetScribblesByTextSearchReply.repeatedFields_, null);
};
goog.inherits(proto.metanotes.api.GetScribblesByTextSearchReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.metanotes.api.GetScribblesByTextSearchReply.displayName = 'proto.metanotes.api.GetScribblesByTextSearchReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.metanotes.api.GetScribblesByTextSearchReply.SearchResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.metanotes.api.GetScribblesByTextSearchReply.SearchResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.metanotes.api.GetScribblesByTextSearchReply.SearchResult.displayName = 'proto.metanotes.api.GetScribblesByTextSearchReply.SearchResult';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.metanotes.api.Scribble.oneofGroups_ = [[3,4]];

/**
 * @enum {number}
 */
proto.metanotes.api.Scribble.BodyCase = {
  BODY_NOT_SET: 0,
  TEXT_BODY: 3,
  BINARY_BODY: 4
};

/**
 * @return {proto.metanotes.api.Scribble.BodyCase}
 */
proto.metanotes.api.Scribble.prototype.getBodyCase = function() {
  return /** @type {proto.metanotes.api.Scribble.BodyCase} */(jspb.Message.computeOneofCase(this, proto.metanotes.api.Scribble.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.metanotes.api.Scribble.prototype.toObject = function(opt_includeInstance) {
  return proto.metanotes.api.Scribble.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.metanotes.api.Scribble} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.metanotes.api.Scribble.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    textBody: jspb.Message.getFieldWithDefault(msg, 3, ""),
    binaryBody: msg.getBinaryBody_asB64(),
    propsMap: (f = msg.getPropsMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.metanotes.api.Scribble}
 */
proto.metanotes.api.Scribble.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.metanotes.api.Scribble;
  return proto.metanotes.api.Scribble.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.metanotes.api.Scribble} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.metanotes.api.Scribble}
 */
proto.metanotes.api.Scribble.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTextBody(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBinaryBody(value);
      break;
    case 5:
      var value = msg.getPropsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.metanotes.api.Scribble.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.metanotes.api.Scribble.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.metanotes.api.Scribble} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.metanotes.api.Scribble.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getPropsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(5, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.metanotes.api.Scribble.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.metanotes.api.Scribble} returns this
 */
proto.metanotes.api.Scribble.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string text_body = 3;
 * @return {string}
 */
proto.metanotes.api.Scribble.prototype.getTextBody = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.metanotes.api.Scribble} returns this
 */
proto.metanotes.api.Scribble.prototype.setTextBody = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.metanotes.api.Scribble.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.metanotes.api.Scribble} returns this
 */
proto.metanotes.api.Scribble.prototype.clearTextBody = function() {
  return jspb.Message.setOneofField(this, 3, proto.metanotes.api.Scribble.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.metanotes.api.Scribble.prototype.hasTextBody = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bytes binary_body = 4;
 * @return {string}
 */
proto.metanotes.api.Scribble.prototype.getBinaryBody = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes binary_body = 4;
 * This is a type-conversion wrapper around `getBinaryBody()`
 * @return {string}
 */
proto.metanotes.api.Scribble.prototype.getBinaryBody_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBinaryBody()));
};


/**
 * optional bytes binary_body = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBinaryBody()`
 * @return {!Uint8Array}
 */
proto.metanotes.api.Scribble.prototype.getBinaryBody_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBinaryBody()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.metanotes.api.Scribble} returns this
 */
proto.metanotes.api.Scribble.prototype.setBinaryBody = function(value) {
  return jspb.Message.setOneofField(this, 4, proto.metanotes.api.Scribble.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.metanotes.api.Scribble} returns this
 */
proto.metanotes.api.Scribble.prototype.clearBinaryBody = function() {
  return jspb.Message.setOneofField(this, 4, proto.metanotes.api.Scribble.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.metanotes.api.Scribble.prototype.hasBinaryBody = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * map<string, string> props = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.metanotes.api.Scribble.prototype.getPropsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 5, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.metanotes.api.Scribble} returns this
 */
proto.metanotes.api.Scribble.prototype.clearPropsMap = function() {
  this.getPropsMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.metanotes.api.GetScribbleRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.metanotes.api.GetScribbleRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.metanotes.api.GetScribbleRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.metanotes.api.GetScribbleRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.metanotes.api.GetScribbleRequest}
 */
proto.metanotes.api.GetScribbleRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.metanotes.api.GetScribbleRequest;
  return proto.metanotes.api.GetScribbleRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.metanotes.api.GetScribbleRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.metanotes.api.GetScribbleRequest}
 */
proto.metanotes.api.GetScribbleRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.metanotes.api.GetScribbleRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.metanotes.api.GetScribbleRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.metanotes.api.GetScribbleRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.metanotes.api.GetScribbleRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.metanotes.api.GetScribbleRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.metanotes.api.GetScribbleRequest} returns this
 */
proto.metanotes.api.GetScribbleRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.metanotes.api.GetScribbleReply.prototype.toObject = function(opt_includeInstance) {
  return proto.metanotes.api.GetScribbleReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.metanotes.api.GetScribbleReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.metanotes.api.GetScribbleReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    scribble: (f = msg.getScribble()) && proto.metanotes.api.Scribble.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.metanotes.api.GetScribbleReply}
 */
proto.metanotes.api.GetScribbleReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.metanotes.api.GetScribbleReply;
  return proto.metanotes.api.GetScribbleReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.metanotes.api.GetScribbleReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.metanotes.api.GetScribbleReply}
 */
proto.metanotes.api.GetScribbleReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.metanotes.api.Scribble;
      reader.readMessage(value,proto.metanotes.api.Scribble.deserializeBinaryFromReader);
      msg.setScribble(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.metanotes.api.GetScribbleReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.metanotes.api.GetScribbleReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.metanotes.api.GetScribbleReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.metanotes.api.GetScribbleReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScribble();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.metanotes.api.Scribble.serializeBinaryToWriter
    );
  }
};


/**
 * optional Scribble scribble = 1;
 * @return {?proto.metanotes.api.Scribble}
 */
proto.metanotes.api.GetScribbleReply.prototype.getScribble = function() {
  return /** @type{?proto.metanotes.api.Scribble} */ (
    jspb.Message.getWrapperField(this, proto.metanotes.api.Scribble, 1));
};


/**
 * @param {?proto.metanotes.api.Scribble|undefined} value
 * @return {!proto.metanotes.api.GetScribbleReply} returns this
*/
proto.metanotes.api.GetScribbleReply.prototype.setScribble = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.metanotes.api.GetScribbleReply} returns this
 */
proto.metanotes.api.GetScribbleReply.prototype.clearScribble = function() {
  return this.setScribble(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.metanotes.api.GetScribbleReply.prototype.hasScribble = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.metanotes.api.GetAllMetadataReply.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.metanotes.api.GetAllMetadataReply.prototype.toObject = function(opt_includeInstance) {
  return proto.metanotes.api.GetAllMetadataReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.metanotes.api.GetAllMetadataReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.metanotes.api.GetAllMetadataReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    scribbleList: jspb.Message.toObjectList(msg.getScribbleList(),
    proto.metanotes.api.Scribble.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.metanotes.api.GetAllMetadataReply}
 */
proto.metanotes.api.GetAllMetadataReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.metanotes.api.GetAllMetadataReply;
  return proto.metanotes.api.GetAllMetadataReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.metanotes.api.GetAllMetadataReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.metanotes.api.GetAllMetadataReply}
 */
proto.metanotes.api.GetAllMetadataReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.metanotes.api.Scribble;
      reader.readMessage(value,proto.metanotes.api.Scribble.deserializeBinaryFromReader);
      msg.addScribble(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.metanotes.api.GetAllMetadataReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.metanotes.api.GetAllMetadataReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.metanotes.api.GetAllMetadataReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.metanotes.api.GetAllMetadataReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScribbleList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.metanotes.api.Scribble.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Scribble scribble = 1;
 * @return {!Array<!proto.metanotes.api.Scribble>}
 */
proto.metanotes.api.GetAllMetadataReply.prototype.getScribbleList = function() {
  return /** @type{!Array<!proto.metanotes.api.Scribble>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.metanotes.api.Scribble, 1));
};


/**
 * @param {!Array<!proto.metanotes.api.Scribble>} value
 * @return {!proto.metanotes.api.GetAllMetadataReply} returns this
*/
proto.metanotes.api.GetAllMetadataReply.prototype.setScribbleList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.metanotes.api.Scribble=} opt_value
 * @param {number=} opt_index
 * @return {!proto.metanotes.api.Scribble}
 */
proto.metanotes.api.GetAllMetadataReply.prototype.addScribble = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.metanotes.api.Scribble, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.metanotes.api.GetAllMetadataReply} returns this
 */
proto.metanotes.api.GetAllMetadataReply.prototype.clearScribbleList = function() {
  return this.setScribbleList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.metanotes.api.SetScribbleRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.metanotes.api.SetScribbleRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.metanotes.api.SetScribbleRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.metanotes.api.SetScribbleRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    scribble: (f = msg.getScribble()) && proto.metanotes.api.Scribble.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.metanotes.api.SetScribbleRequest}
 */
proto.metanotes.api.SetScribbleRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.metanotes.api.SetScribbleRequest;
  return proto.metanotes.api.SetScribbleRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.metanotes.api.SetScribbleRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.metanotes.api.SetScribbleRequest}
 */
proto.metanotes.api.SetScribbleRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.metanotes.api.Scribble;
      reader.readMessage(value,proto.metanotes.api.Scribble.deserializeBinaryFromReader);
      msg.setScribble(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.metanotes.api.SetScribbleRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.metanotes.api.SetScribbleRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.metanotes.api.SetScribbleRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.metanotes.api.SetScribbleRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScribble();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.metanotes.api.Scribble.serializeBinaryToWriter
    );
  }
};


/**
 * optional Scribble scribble = 1;
 * @return {?proto.metanotes.api.Scribble}
 */
proto.metanotes.api.SetScribbleRequest.prototype.getScribble = function() {
  return /** @type{?proto.metanotes.api.Scribble} */ (
    jspb.Message.getWrapperField(this, proto.metanotes.api.Scribble, 1));
};


/**
 * @param {?proto.metanotes.api.Scribble|undefined} value
 * @return {!proto.metanotes.api.SetScribbleRequest} returns this
*/
proto.metanotes.api.SetScribbleRequest.prototype.setScribble = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.metanotes.api.SetScribbleRequest} returns this
 */
proto.metanotes.api.SetScribbleRequest.prototype.clearScribble = function() {
  return this.setScribble(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.metanotes.api.SetScribbleRequest.prototype.hasScribble = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.metanotes.api.RemoveScribbleRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.metanotes.api.RemoveScribbleRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.metanotes.api.RemoveScribbleRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.metanotes.api.RemoveScribbleRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.metanotes.api.RemoveScribbleRequest}
 */
proto.metanotes.api.RemoveScribbleRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.metanotes.api.RemoveScribbleRequest;
  return proto.metanotes.api.RemoveScribbleRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.metanotes.api.RemoveScribbleRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.metanotes.api.RemoveScribbleRequest}
 */
proto.metanotes.api.RemoveScribbleRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.metanotes.api.RemoveScribbleRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.metanotes.api.RemoveScribbleRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.metanotes.api.RemoveScribbleRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.metanotes.api.RemoveScribbleRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.metanotes.api.RemoveScribbleRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.metanotes.api.RemoveScribbleRequest} returns this
 */
proto.metanotes.api.RemoveScribbleRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.metanotes.api.GetScribblesByTextSearchRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.metanotes.api.GetScribblesByTextSearchRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.metanotes.api.GetScribblesByTextSearchRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.metanotes.api.GetScribblesByTextSearchRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    query: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.metanotes.api.GetScribblesByTextSearchRequest}
 */
proto.metanotes.api.GetScribblesByTextSearchRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.metanotes.api.GetScribblesByTextSearchRequest;
  return proto.metanotes.api.GetScribblesByTextSearchRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.metanotes.api.GetScribblesByTextSearchRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.metanotes.api.GetScribblesByTextSearchRequest}
 */
proto.metanotes.api.GetScribblesByTextSearchRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuery(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.metanotes.api.GetScribblesByTextSearchRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.metanotes.api.GetScribblesByTextSearchRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.metanotes.api.GetScribblesByTextSearchRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.metanotes.api.GetScribblesByTextSearchRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuery();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string query = 1;
 * @return {string}
 */
proto.metanotes.api.GetScribblesByTextSearchRequest.prototype.getQuery = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.metanotes.api.GetScribblesByTextSearchRequest} returns this
 */
proto.metanotes.api.GetScribblesByTextSearchRequest.prototype.setQuery = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.metanotes.api.GetScribblesByTextSearchReply.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.metanotes.api.GetScribblesByTextSearchReply.prototype.toObject = function(opt_includeInstance) {
  return proto.metanotes.api.GetScribblesByTextSearchReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.metanotes.api.GetScribblesByTextSearchReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.metanotes.api.GetScribblesByTextSearchReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    resultList: jspb.Message.toObjectList(msg.getResultList(),
    proto.metanotes.api.GetScribblesByTextSearchReply.SearchResult.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.metanotes.api.GetScribblesByTextSearchReply}
 */
proto.metanotes.api.GetScribblesByTextSearchReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.metanotes.api.GetScribblesByTextSearchReply;
  return proto.metanotes.api.GetScribblesByTextSearchReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.metanotes.api.GetScribblesByTextSearchReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.metanotes.api.GetScribblesByTextSearchReply}
 */
proto.metanotes.api.GetScribblesByTextSearchReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.metanotes.api.GetScribblesByTextSearchReply.SearchResult;
      reader.readMessage(value,proto.metanotes.api.GetScribblesByTextSearchReply.SearchResult.deserializeBinaryFromReader);
      msg.addResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.metanotes.api.GetScribblesByTextSearchReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.metanotes.api.GetScribblesByTextSearchReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.metanotes.api.GetScribblesByTextSearchReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.metanotes.api.GetScribblesByTextSearchReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResultList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.metanotes.api.GetScribblesByTextSearchReply.SearchResult.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.metanotes.api.GetScribblesByTextSearchReply.SearchResult.prototype.toObject = function(opt_includeInstance) {
  return proto.metanotes.api.GetScribblesByTextSearchReply.SearchResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.metanotes.api.GetScribblesByTextSearchReply.SearchResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.metanotes.api.GetScribblesByTextSearchReply.SearchResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    snippet: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.metanotes.api.GetScribblesByTextSearchReply.SearchResult}
 */
proto.metanotes.api.GetScribblesByTextSearchReply.SearchResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.metanotes.api.GetScribblesByTextSearchReply.SearchResult;
  return proto.metanotes.api.GetScribblesByTextSearchReply.SearchResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.metanotes.api.GetScribblesByTextSearchReply.SearchResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.metanotes.api.GetScribblesByTextSearchReply.SearchResult}
 */
proto.metanotes.api.GetScribblesByTextSearchReply.SearchResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSnippet(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.metanotes.api.GetScribblesByTextSearchReply.SearchResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.metanotes.api.GetScribblesByTextSearchReply.SearchResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.metanotes.api.GetScribblesByTextSearchReply.SearchResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.metanotes.api.GetScribblesByTextSearchReply.SearchResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSnippet();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.metanotes.api.GetScribblesByTextSearchReply.SearchResult.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.metanotes.api.GetScribblesByTextSearchReply.SearchResult} returns this
 */
proto.metanotes.api.GetScribblesByTextSearchReply.SearchResult.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string snippet = 2;
 * @return {string}
 */
proto.metanotes.api.GetScribblesByTextSearchReply.SearchResult.prototype.getSnippet = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.metanotes.api.GetScribblesByTextSearchReply.SearchResult} returns this
 */
proto.metanotes.api.GetScribblesByTextSearchReply.SearchResult.prototype.setSnippet = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated SearchResult result = 1;
 * @return {!Array<!proto.metanotes.api.GetScribblesByTextSearchReply.SearchResult>}
 */
proto.metanotes.api.GetScribblesByTextSearchReply.prototype.getResultList = function() {
  return /** @type{!Array<!proto.metanotes.api.GetScribblesByTextSearchReply.SearchResult>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.metanotes.api.GetScribblesByTextSearchReply.SearchResult, 1));
};


/**
 * @param {!Array<!proto.metanotes.api.GetScribblesByTextSearchReply.SearchResult>} value
 * @return {!proto.metanotes.api.GetScribblesByTextSearchReply} returns this
*/
proto.metanotes.api.GetScribblesByTextSearchReply.prototype.setResultList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.metanotes.api.GetScribblesByTextSearchReply.SearchResult=} opt_value
 * @param {number=} opt_index
 * @return {!proto.metanotes.api.GetScribblesByTextSearchReply.SearchResult}
 */
proto.metanotes.api.GetScribblesByTextSearchReply.prototype.addResult = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.metanotes.api.GetScribblesByTextSearchReply.SearchResult, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.metanotes.api.GetScribblesByTextSearchReply} returns this
 */
proto.metanotes.api.GetScribblesByTextSearchReply.prototype.clearResultList = function() {
  return this.setResultList([]);
};


goog.object.extend(exports, proto.metanotes.api);
